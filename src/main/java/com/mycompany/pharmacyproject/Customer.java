/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.pharmacyproject;

import java.awt.print.PrinterException;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.YES_OPTION;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Admin
 */
public class Customer extends javax.swing.JFrame {

    /**
     * Creates new form Customer
     */
    public Customer() {
        initComponents();
        component();
         //JButton receiptButton = new JButton("Generate Receipt");
        //receiptButton.addActionListener(e -> generateAndPrintReceipt());
        //add(receiptButton, BorderLayout.CENTER);
    }
    private void component()
    {
        File read2 = new File("Customers.txt");
        String[] col = {"FullName","Pnone Number","Medicine Name","Strips","Price Per Strips","Total Price","Purchase Date"};

                DefaultTableModel model = new DefaultTableModel();
                 model.setColumnIdentifiers(col);
                jTable2.setModel(model);
        try {
            Scanner sc2 = new Scanner(read2);
            String[] rows1 = new String[7];
             int i = 0;
              while(sc2.hasNextLine()){
                String line = sc2.nextLine();
                rows1[i] = line;
                System.out.println(line);
                if((i+1)%7 == 0){
                    model.addRow(rows1);
                    i = 0;
                }
                else i++;
            }
             
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Admins.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtStrips = new javax.swing.JTextField();
        txtPn = new javax.swing.JTextField();
        Save = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        txtMn = new javax.swing.JTextField();
        delete = new javax.swing.JButton();
        Clear = new javax.swing.JButton();
        Update = new javax.swing.JButton();
        Recipt = new javax.swing.JButton();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();
        txtPps = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1350, 650));
        setSize(new java.awt.Dimension(0, 0));

        jPanel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jPanel2.setBackground(new java.awt.Color(55, 16, 16));

        jButton1.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/arrow-left (1).png"))); // NOI18N
        jButton1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 91, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jButton1)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel5.setBackground(new java.awt.Color(215, 243, 241));

        jTable2.setBackground(new java.awt.Color(55, 16, 16));
        jTable2.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jTable2.setForeground(new java.awt.Color(255, 255, 255));
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable2.setGridColor(new java.awt.Color(255, 255, 255));
        jTable2.setShowGrid(true);
        jTable2.getTableHeader().setReorderingAllowed(false);
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);

        jLabel2.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel2.setText("Name: ");

        jLabel3.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel3.setText("Strips:");

        jLabel4.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel4.setText("Phone Number:");

        jLabel5.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel5.setText("Purchase Date:");

        txtName.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        txtName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(55, 16, 16), 3));

        txtStrips.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        txtStrips.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(55, 16, 16), 3));
        txtStrips.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtStripsActionPerformed(evt);
            }
        });

        txtPn.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        txtPn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(55, 16, 16), 3));
        txtPn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPnActionPerformed(evt);
            }
        });

        Save.setBackground(new java.awt.Color(215, 243, 241));
        Save.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        Save.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/save (3).png"))); // NOI18N
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel6.setText("Medicine Name:");

        txtMn.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        txtMn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(55, 16, 16), 3));
        txtMn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMnActionPerformed(evt);
            }
        });

        delete.setBackground(new java.awt.Color(215, 243, 241));
        delete.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        delete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/garbage.png"))); // NOI18N
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        Clear.setBackground(new java.awt.Color(215, 243, 241));
        Clear.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Clear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/clear (7).png"))); // NOI18N
        Clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearActionPerformed(evt);
            }
        });

        Update.setBackground(new java.awt.Color(215, 243, 241));
        Update.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Update.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/updated (4).png"))); // NOI18N
        Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateActionPerformed(evt);
            }
        });

        Recipt.setBackground(new java.awt.Color(215, 243, 241));
        Recipt.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        Recipt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/accounting (2).png"))); // NOI18N
        Recipt.setText("Receipt");
        Recipt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReciptActionPerformed(evt);
            }
        });

        jDateChooser1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(55, 16, 16), 3));
        jDateChooser1.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel1.setText("Price Per Strips:");

        txtPps.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        txtPps.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(55, 16, 16), 3));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Save, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Update, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Clear, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Recipt)
                .addGap(93, 93, 93))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(jLabel6))
                .addGap(34, 34, 34)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtName, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)
                    .addComponent(txtPn)
                    .addComponent(txtMn))
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(212, 212, 212)
                        .addComponent(jLabel3))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addGap(39, 39, 39)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtStrips)
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                    .addComponent(txtPps))
                .addContainerGap(136, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtStrips, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPps, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 25, Short.MAX_VALUE)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Clear, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(Save, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9))
                    .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Update, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Recipt))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        MedicineManagement MedicineManagementFrame = new MedicineManagement();
        MedicineManagementFrame.setVisible(true);
        MedicineManagementFrame.pack();
        MedicineManagementFrame.setLocationRelativeTo(null);
        // MedicineManagementFrame.setResizable(false);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        // TODO add your handling code here:
        // DefaultTableModel model = new DefaultTableModel();
        // int i =jTable1.getSelectedRow();
        // model.removeRow(i);
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        int selectedRow = jTable2.getSelectedRow();
        txtName.setText(model.getValueAt(selectedRow, 0).toString());
        
        txtPn.setText(model.getValueAt(selectedRow, 1).toString());
        txtMn.setText(model.getValueAt(selectedRow, 2).toString());
        txtStrips.setText(model.getValueAt(selectedRow, 3).toString());
        txtPps.setText(model.getValueAt(selectedRow, 4).toString());
        try {
            //DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
            //int seectedRow = jTable1.getSelectedRow();   
            Date date = new SimpleDateFormat("MMM-d-y").parse((String)model.getValueAt(selectedRow, 6).toString());  
            jDateChooser1.setDate(date);
                    } catch (ParseException ex) {
           // Logger.getLogger(Java_JTable_And_JDateChooser.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jTable2MouseClicked

    private void txtStripsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtStripsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtStripsActionPerformed

    private void txtPnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPnActionPerformed

    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionPerformed
        // TODO add your handling code here:
        //Date obj = new Date();
        
        
        String name = txtName.getText();
        String strips = txtStrips.getText();
        String pn = txtPn.getText();
        String mn = txtMn.getText();
        String pps = txtPps.getText();
        SimpleDateFormat dateFormat = new SimpleDateFormat("MMM-d-y");
    Date selectedDate = jDateChooser1.getDate();
        //String ed = txtEd.getText();
        if (pps.isBlank()) {
    // Handle case where pps is empty
    JOptionPane.showMessageDialog(this, "Please enter all information and select a valid expiration date.");
    return;
    }
        double p = Double.parseDouble(pps);
                    double t = Double.parseDouble(strips);
                    double tp= t*p;
                    
        
        if(name.isBlank()||strips.isBlank()||pn.isBlank()||mn.isBlank()||selectedDate == null||pps.isBlank())
        {
            JOptionPane.showMessageDialog(null, "Please enter all information and select a valid expiration date.");
        }
        else
        {
            String expirationDate = dateFormat.format(selectedDate);
            int response = JOptionPane.showConfirmDialog(this, "Do you want to save this information?", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        
      if(response==JOptionPane.YES_OPTION)
      {

            try {
                FileWriter ffll = new FileWriter("Customers.txt",true);
                ffll.write(name+"\n"+pn+"\n"+mn+"\n"+strips+"\n"+pps+"\n"+tp+"\n"+expirationDate+"\n");
                ffll.close();
                //FileWriter ffll2 = new FileWriter("Logins.txt",true);
                //ffll2.write(username+"\t"+password+"\n");
                //ffll2.close();

                txtName.setText("");
                txtStrips.setText("");
                txtPn.setText("");
                txtMn.setText("");
                txtPps.setText("");
                jDateChooser1.setDate(null);
                // txtEd.setText("");

                File read = new File("Customers.txt");
                String[] col = {"FullName","Pnone Number","Medicine Name","Strips","Price Per Strips","Total Price","Purchase Date"};

                DefaultTableModel model = new DefaultTableModel();
                model.setColumnIdentifiers(col);
                jTable2.setModel(model);

                try{
                    Scanner sc = new Scanner(read);
                    String[] rows = new String[7];
                    int i = 0;

                    while(sc.hasNextLine()){
                        String line = sc.nextLine();
                        rows[i] = line;
                        //System.out.println(line);
                        if((i+1)%7 == 0){
                            model.addRow(rows);
                            i = 0;
                        }
                        else i++;
                    }
                    sc.close();
                }
                catch(FileNotFoundException e){
                }
            }
            catch(IOException e){
            }
            
         JOptionPane.showMessageDialog(null,"Saved Successfully");
            
      }else
      {
          JOptionPane.showMessageDialog(null,"Not Saved");

      }
        
        }
      
    }//GEN-LAST:event_SaveActionPerformed

    private void txtMnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMnActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        // TODO add your handling code here:
        
        
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        int selectedRow = jTable2.getSelectedRow();

        if (selectedRow != -1 && selectedRow < model.getRowCount()) {
int response = JOptionPane.showConfirmDialog(this, "Do you want to delete this information?", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        
      if(response==JOptionPane.YES_OPTION)
      {
            model.removeRow(selectedRow);

            ArrayList<String> remainingLines = new ArrayList<>();
            for (int i = 0; i < model.getRowCount(); i++) {
                StringBuilder row = new StringBuilder();
                for (int j = 0; j < model.getColumnCount(); j++) {
                    row.append(model.getValueAt(i, j)).append("\n");
                }
                remainingLines.add(row.toString().trim());
            }

            try (BufferedWriter writer = new BufferedWriter(new FileWriter("Customers.txt"))) {
                for (String line : remainingLines) {
                    writer.write(line);
                    writer.newLine();
                }
            } catch (IOException ex) {
                ex.printStackTrace(); // Added for better debugging
            }
        JOptionPane.showMessageDialog(null,"Saved Successfully");
            
      }else
      {
          JOptionPane.showMessageDialog(null,"Not Saved");
           Customer CustomerFrame = new Customer();
        CustomerFrame.setVisible(true);
        CustomerFrame.pack();
        CustomerFrame.setLocationRelativeTo(null);
       // CustomerFrame.setResizable(false);
        this.dispose();
      }
} else {
            JOptionPane.showMessageDialog(this, "Please select a valid row to delete.");
        }
        txtName.setText("");
        txtPn.setText("");
        txtMn.setText("");
        txtStrips.setText("");
        txtPps.setText("");
         jDateChooser1.setDate(null);
      
    }//GEN-LAST:event_deleteActionPerformed

    private void ClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearActionPerformed
        // TODO add your handling code here:

        txtName.setText("");
        txtStrips.setText("");
        txtPn.setText("");
        txtMn.setText("");
        txtPps.setText("");
        //txtEd.setText("");
        jDateChooser1.setDate(null);
    }//GEN-LAST:event_ClearActionPerformed

    private void UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateActionPerformed
                                
    // TODO add your handling code here:

    String strips = txtStrips.getText();
    String pps = txtPps.getText();
    
    // Check if the fields are not empty before parsing
    if (strips.isEmpty() || pps.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Please select a valid row to update.");
        return;
    }
    
    try {
        double p = Double.parseDouble(pps);
        int t = Integer.parseInt(strips);
        double tp = t * p;

        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        int selectedRow = jTable2.getSelectedRow();
        SimpleDateFormat date = new SimpleDateFormat("MMM-d-y");

        if (selectedRow != -1 && selectedRow < model.getRowCount()) {
            // Check other fields for emptiness or validity if needed
            if (txtName.equals("") || txtPn.equals("") || txtMn.equals("")) {
                JOptionPane.showMessageDialog(null, "Please fill in all required fields.");
                return;
            }

            int response = JOptionPane.showConfirmDialog(this, "Do you want to update this information?", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

            if (response == JOptionPane.YES_OPTION) {
                model.setValueAt(txtName.getText(), selectedRow, 0);
                model.setValueAt(txtPn.getText(), selectedRow, 1);
                model.setValueAt(txtMn.getText(), selectedRow, 2);
                model.setValueAt(txtStrips.getText(), selectedRow, 3);
                model.setValueAt(txtPps.getText(), selectedRow, 4);
                model.setValueAt(tp, selectedRow, 5);
                model.setValueAt(date.format(jDateChooser1.getDate()), selectedRow, 6);

                // Save updated rows to file
                ArrayList<String> updatedLines = new ArrayList<>();
                for (int i = 0; i < model.getRowCount(); i++) {
                    StringBuilder row = new StringBuilder();
                    for (int j = 0; j < model.getColumnCount(); j++) {
                        row.append(model.getValueAt(i, j)).append("\n");
                    }
                    updatedLines.add(row.toString().trim());
                }

                try (BufferedWriter writer = new BufferedWriter(new FileWriter("Customers.txt"))) {
                    for (String line : updatedLines) {
                        writer.write(line);
                        writer.newLine();
                    }
                } catch (IOException ex) {
                    ex.printStackTrace(); // Handle or log the exception as needed
                }

                // Clear input fields and notify user
                txtName.setText("");
                txtStrips.setText("");
                txtPn.setText("");
                txtMn.setText("");
                txtPps.setText("");
                jDateChooser1.setDate(null);
                JOptionPane.showMessageDialog(null, "Information updated successfully.");
            } else {
                JOptionPane.showMessageDialog(null, "Update canceled.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a valid row to update.");
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Invalid number format. Please enter valid numerical values for Strips and Price per Strip.");
    }


    }//GEN-LAST:event_UpdateActionPerformed

    private void ReciptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReciptActionPerformed
        
    DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
    int selectedRow = jTable2.getSelectedRow();
    
    if (selectedRow == -1 || selectedRow >= model.getRowCount()) {
        JOptionPane.showMessageDialog(this, "Please select a row to generate a receipt.");
        return;
    }
    
    String strips = txtStrips.getText();
    String pps = txtPps.getText();

    if (txtName.getText().isBlank() || strips.isBlank() || txtPn.getText().isBlank() ||
        txtMn.getText().isBlank() || txtPps.getText().isBlank() || jDateChooser1.getDate() == null) {
        JOptionPane.showMessageDialog(null, "Please fill in all required fields.");
        return;
    }

    try {
        double p = Double.parseDouble(pps);
        int t = Integer.parseInt(strips);
        double tp = t * p;

        JTextArea area = new JTextArea();
        area.setText("Pharmacy Receipt\n");
        area.append("==============================\n");
        area.append("Date: " + new SimpleDateFormat("MMM-d-y").format(new Date()) + "\n");
        area.append("Customer Name: " + txtName.getText() + "\n");
        area.append("Phone Number: " + txtPn.getText() + "\n");
        area.append("Medicine: " + txtMn.getText() + "\n");
        area.append("Strips: " + strips + "\n");
        area.append("Price Per Strips: " + pps + "\n");
        area.append("Total Price: " + tp + " TK\n");
        area.append("Purchase Date: " + new SimpleDateFormat("MMM-d-y").format(jDateChooser1.getDate()) + "\n");

        area.setEditable(false);

        int choice = JOptionPane.showConfirmDialog(this, new JScrollPane(area), "Receipt", JOptionPane.YES_NO_OPTION);
        if (choice == JOptionPane.YES_OPTION) {
            try {
                area.print();
            } catch (PrinterException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Failed to print receipt: " + e.getMessage(), "Print Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Invalid number format in Strips or Price per Strips fields.");
        e.printStackTrace();
    }


    }//GEN-LAST:event_ReciptActionPerformed

    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Clear;
    private javax.swing.JButton Recipt;
    private javax.swing.JButton Save;
    private javax.swing.JButton Update;
    private javax.swing.JButton delete;
    private javax.swing.JButton jButton1;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JTable jTable2;
    private javax.swing.JTextField txtMn;
    public javax.swing.JTextField txtName;
    public javax.swing.JTextField txtPn;
    private javax.swing.JTextField txtPps;
    public javax.swing.JTextField txtStrips;
    // End of variables declaration//GEN-END:variables
public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Customer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Customer().setVisible(true);
            }
        });
    }

}
